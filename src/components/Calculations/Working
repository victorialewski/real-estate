import React, { useState, useEffect } from "react";
import { MdExpandMore, MdExpandLess } from "react-icons/md";
import "../SOW/SowItem.css";
import "./SowLeft.css";

export default function SowLeft({
    data,
    items,
    collapsed,
    toggleCollapse,
    handleSelectAll,
    handleDeselectAll,
    handleCheckboxChange,
    handleInputChange,
    handleRadioChange,
}) {
    const [bathroomCount, setBathroomCount] = useState(""); // Track the value for bathroom count
    const [total, setTotal] = useState(0); // Track the total

    useEffect(() => {
        // Recalculate total every time an item or its properties change
        const newTotal = items.reduce((acc, item) => {
            if (item.checked) {
                if (item.useSetValue) {
                    // If using set value
                    acc += parseFloat(item.value) || 0;
                } else {
                    // If using custom value
                    acc += parseFloat(item.inputValue) || 0;
                }
            }
            return acc;
        }, 0);
        setTotal(newTotal); // Update the total with the new calculation
    }, [items, bathroomCount]); // Re-run when items or bathroom count changes

    return (
        <div className="Left">
            <div>Rehab Calculations</div>
            <div className="space-y-8" id="accordion">
                {data.map((section) => (
                    <div key={section.category} className="border-t pt-4 category">
                        {/* Category Title + Controls */}
                        <div className="category-container">
                            <div className="category-wrapper">
                                <div className="icon-wrapper">
                                    {collapsed[section.category] ? (
                                        <MdExpandMore
                                            onClick={() => toggleCollapse(section.category)}
                                            className="category-dropdown cursor-pointer"
                                        />
                                    ) : (
                                        <MdExpandLess
                                            onClick={() => toggleCollapse(section.category)}
                                            className="category-dropdown cursor-pointer"
                                        />
                                    )}
                                </div>
                                <div
                                    className="category-title"
                                    onClick={() => toggleCollapse(section.category)}
                                >
                                    {section.category}
                                </div>

                                {/* Select All/Deselect All */}
                                <div className="categoty-selectAll">
                                    <input
                                        type="checkbox"
                                        onChange={(e) =>
                                            e.target.checked && handleSelectAll(section.category)
                                        }
                                    />
                                    <label>Select All</label>
                                </div>
                                <div className="categoty-deSelectAll">
                                    <input
                                        type="checkbox"
                                        onChange={(e) =>
                                            e.target.checked && handleDeselectAll(section.category)
                                        }
                                    />
                                    <label>Deselect All</label>
                                </div>
                            </div>
                        </div>

                        {/* Items inside category */}
                        {!collapsed[section.category] && (
                            <div className="space-y-4">
                                {items
                                    .filter((item) => item.id.startsWith(section.category))
                                    .map((item) => (
                                        <div key={item.id} className="category-breakdown">
                                            <div className="category-name">
                                                <input
                                                    type="checkbox"
                                                    checked={item.checked}
                                                    onChange={() => handleCheckboxChange(item.id)}
                                                />
                                                <span>{item.property}</span>
                                            </div>

                                            {/* Price options */}
                                            <div className="pricing">
                                                <div className="set-pricing">
                                                    <label>
                                                        <input
                                                            type="radio"
                                                            name={`useSetValue-${item.id}`}
                                                            checked={item.useSetValue}
                                                            onChange={() =>
                                                                handleRadioChange(item.id, true)
                                                            }
                                                        />
                                                        <span>{item.value}</span>
                                                    </label>
                                                </div>
                                                <div className="custom-pricing">
                                                    <label>
                                                        <input
                                                            type="radio"
                                                            name={`useSetValue-${item.id}`}
                                                            checked={!item.useSetValue}
                                                            onChange={() => {
                                                                handleRadioChange(item.id, false);
                                                               // setBathroomCount(""); // Reset bathroom count when switching to custom input
                                                            }}
                                                        />
                                                        <input
                                                            type="number"
                                                            value={item.useSetValue ? "" : item.inputValue || ""}
                                                            onFocus={() => handleRadioChange(item.id, false)}
                                                            onChange={(e) =>
                                                                handleInputChange(item.id, e.target.value)
                                                            }
                                                            placeholder="Custom Value"
                                                        />
                                                    </label>
                                                </div>
                                            </div>

                                            {/* Only show this for Bathrooms */}
                                            {item.property.toLowerCase() === "bathroom" && (
                                                <div className="extra-input mt-4">
                                                    <label>
                                                        <span>Multiply by {item.inputValue}</span>
                                                        <input
                                                            type="number"
                                                            value={bathroomCount || ""}
                                                            onChange={(e) => {
                                                                const newBathroomCount = e.target.value;
                                                                const parsedBathroomCount = parseFloat(newBathroomCount);
                                                                
                                                                // Use the custom input value (item.inputValue) for multiplication
                                                                const multiplier = parseFloat(item.inputValue) || 0;

                                                                // Multiply if both are valid numbers
                                                                if (!isNaN(parsedBathroomCount) && !isNaN(multiplier)) {
                                                                    const result = parsedBathroomCount * multiplier;
                                                                    // Update the bathroom count state and pass the result
                                                                    setBathroomCount(newBathroomCount); // Update state for input value
                                                                    handleInputChange(item.id, result.toString()); // Pass multiplied result
                                                                } else if (newBathroomCount === "") {
                                                                    setBathroomCount(""); // Handle clearing of input
                                                                    handleInputChange(item.id, ""); // Pass empty string if input is cleared
                                                                } else {
                                                                    setBathroomCount(""); // Handle invalid input
                                                                    handleInputChange(item.id, ""); // Pass empty string
                                                                }
                                                            }}
                                                            placeholder="Enter number of bathrooms"
                                                            className="border p-2 rounded-md w-full sm:w-48"
                                                        />
                                                    </label>
                                                </div>
                                            )}
                                        </div>
                                    ))}
                            </div>
                        )}
                    </div>
                ))}
            </div>

            {/* Display the total */}
            <div className="total">
                <h3>Total: ${total.toFixed(2)}</h3>
            </div>
        </div>
    );
}
